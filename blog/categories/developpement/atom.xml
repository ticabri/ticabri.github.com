<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: développement | ticablog]]></title>
  <link href="http://blog.ticabri.com/blog/categories/developpement/atom.xml" rel="self"/>
  <link href="http://blog.ticabri.com/"/>
  <updated>2015-04-27T10:47:46+02:00</updated>
  <id>http://blog.ticabri.com/</id>
  <author>
    <name><![CDATA[ticabri]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les développeurs Heisenberg]]></title>
    <link href="http://blog.ticabri.com/blog/2015/04/21/les-developpeurs-heisenberg/"/>
    <updated>2015-04-21T22:57:53+02:00</updated>
    <id>http://blog.ticabri.com/blog/2015/04/21/les-developpeurs-heisenberg</id>
    <content type="html"><![CDATA[<p><em>Introduction</em></p>

<p><em>Ce texte est une traduction de l’article de <strong>Mike Hadlow</strong> intitulée <a href="http://mikehadlow.blogspot.fr/2014/06/heisenberg-developers.html">Heisenberg Developers</a> pour laquelle <a href="https://twitter.com/mikehadlow/status/582805129058992128">il m&#8217;a donné le feu vert</a></em>.</p>

<p><strong>TL;DR</strong> Vous ne pouvez pas observer un développeur sans en altérer son comportement.</p>

<p><img class="<a" src="href="http://lh5.ggpht.com/-W7-b0PssM78/U5HXrWQOWCI/AAAAAAAABZc/4Bw-LlzHkPI/image%25255B5%25255D.png?imgmax=800">http://lh5.ggpht.com/-W7-b0PssM78/U5HXrWQOWCI/AAAAAAAABZc/4Bw-LlzHkPI/image%25255B5%25255D.png?imgmax=800</a>&#8221; width=&#8221;320&#8221;></p>

<p><strong>Tout d&#8217;abord, une histoire</strong></p>

<p>Il y a quelques années j&#8217;ai travaillé sur un assez large projet en tant que développeur au sein d&#8217;une équipe. Nous devions construire un système interne pour assister un process métier déjà en place. Au début tout se passait très bien. Les besoins des utilisateurs étaient plutôt bien définis et nous itérions efficacement depuis le backlog – la boite à idées des prochaines fonctionnalités. Nous étions la plupart du temps livrés à nous-mêmes. Nous avions un business owner – le “chef de projet” – non technique et un nombre d&#8217;utilisateurs potentiels pour nous donner les objectifs généraux, et pouvant tester les fonctionnalités lorsqu&#8217;elles étaient implémentées. Lorsque nous considérions que tel bout de code avait besoin d&#8217;un refactoring, nous prenions le temps de le faire. Lorsqu&#8217;un noeud apparaissait nous changions le design pour le faire disparaître. Nous n&#8217;avions pas besoin de demander la permission pour faire quoi que ce soit, tant que les fonctionnalités étaient livrées à intervalle raisonnable, tout le monde était content.</p>

<p>Puis vint cette exigence. Celle qui tente de remplacer des années d&#8217;expérience et d&#8217;intuition d&#8217;un expert par un logiciel. Ce qui avait commencé comme une exigence vague et fumeuse devint bientôt un monstre alors que nous nous y engouffrions de plus en plus. Nous avons essayé de la repousser, ou au moins de repousser sa livraison à une version ultérieure du logiciel sans en annoncer de date précise. Mais non, les responsables du projet étaient pressants, ils la voulaient dans la prochaine version. Un collègue vraiment futé pensa que le problème pourrait être résolu avec un DSL (Domain-Specific Language, i.e. le langage spécifique du métier) qui permettrait aux utilisateurs d&#8217;encoder eux-mêmes leurs règles métier, c&#8217;est ainsi qu&#8217;accompagné d&#8217;un autre collègue, ils commencèrent à travailler à son élaboration. Plusieurs mois plus tard, ils travaillaient toujours dessus. Le métier était frustré par l&#8217;absence d&#8217;avancement et les dates de livraison bien définies au départ ont commencé à glisser. C&#8217;était un sacré merdier.</p>

<p>Le patron y jeta un oeil, considéra que nous étions des électrons libres et décida qu&#8217;il fallait redresser le navire. Il embaucha un project manager (PM) à  l’excellent CV et avec la réputation de pouvoir garder sous contrôle les projets capricieux. Il nous a présenté &lsquo;Jira&rsquo;, un mot qui génère la peur dans l&#8217;âme des développeurs. Désormais, plutôt que de prendre une exigence à forte valeur et de l&#8217;implémenter sans date précise de livraison, nous devions découper la fonctionnalité en petites tâches simples, estimer chacune d’elles, puis redécouper celles à trop gros tramage si leur exécution risquait de dépasser la journée. Toutes les deux semaines nous avions une journée consacrée aux réunions permettant de définir ces tâches. Puis durant les 8 jours suivants, nous travaillions sur ces tâches en n&#8217;omettant pas de tenir Jira à jour après chaque tâche en y inscrivant le temps nécessaire à leur exécution. Notre project manager n&#8217;était pas content lorsque l&#8217;exécution effective de la tâche était plus longue que son estimation et il s&#8217;empressait d&#8217;y associer un des membres de l&#8217;équipe pour travailler avec le développeur original afin d&#8217;accélérer son traitement. Nous avons très vite appris à ajouter beaucoup de précautions à nos estimations. Nous étions concentrés sur la livraison. Toute demande pour revoir le design du code et sa maintenance était désapprouvée et notre journée était trop encadrée pour nous permettre de refactorer &lsquo;en douce&rsquo;.</p>

<p>Puis cette chose étrange commença à arriver. Tout se mit à ralentir.</p>

<p>Bien sûr nous ne pouvions rien prouver car il n&#8217;y avait aucune donnée de l’époque ‘pre-PM’ à comparer avec la ‘post-PM’, mais il y avait une diminution sensible de la vitesse de livraison des fonctionnalités. Avec ces calculs montrant que la date de livraison du projet glissait, notre PM n’innova pas et engagea de nouveaux développeurs, je crois que la plupart étaient d’anciens collègues avec lesquels il avait travaillé. Nous, l’équipe en place, avions très peu de choses à dire sur les embauches, et il nous a semblé qu&#8217;il y avait un fossé culturel entre nous et les nouveaux. Chaque fois qu’il y avait un débat sur le refactoring du code, ou sur la réflexion autour d&#8217;une fonctionnalité problématique, les nouveaux argumentaient contre, en parlaient comme d’une tour d’ivoire et ne délivraient pas les fonctionnalités. Le PM posait son veto et prenait le parti des nouveaux.</p>

<p>Nous étions devenus en quelque sorte démotivés. Après avoir tenté plusieurs fois d’expliquer comment les choses devaient être faites et être bottés en touche, vous commencez par n’avoir plus que deux choix : abandonner, ne pas argumenter et attendre la paie, ou partir. Notre meilleur développeur, le mec du DSL, est parti, et ceux d’entre nous qui prônaient pour un bon design perdirent un de leur champion en chef. J’ai appris à gonfler mes estimations, faire ce qu’on me disait de faire, et j’ai gardé mon imagination et ma créativité pour mes projets personnels, ceux du soir et du week-end. Ça me paraissait bizarre quand mes nouveaux collègues me disaient aimer réellement le développement, d’ailleurs les discussions dans nos locaux tournaient plus souvent autour des voitures que des langages de programmation. En fait ils semblaient préférer les gestions de projets finement grainées. Comme l’un d’eux me l’a expliqué, “tu prends la prochaine tâche de la liste, tu fais le taf, tu le valides, et tu n’as plus à t’en soucier.” Ça les soulageait des décisions stratégiques ou des visions stratégiques à prendre.</p>

<p>Le projet n’était pas heureux. Les fonctionnalités prenaient de plus en plus de temps à être livrées. Il semblait y avoir de plus en plus de bugs, très peu semblaient être fixés, même avec un nombre croissant de développeurs. L’entreprise dépensait de plus en plus d’argent pour des bénéfices en chute libre.</p>

<p><strong>Pourquoi est-ce autant parti de travers ?</strong></p>

<p>La gestion de projets finement grainée est séduisante pour une entreprise. Toute organisation a besoin de contrôle. Nous voulons savoir ce que peut nous apporter le travail de développeurs si cher payés. Nous voulons être capables d’estimer précisément le temps nécessaire à délivrer un système dans le but de faire une analyse précise du retour sur investissement et de donner à l’entreprise une bonne estimation des dates de livraison. Il y a aussi l’espoir que par la construction d’une base de données complète contenant les estimations par rapport à l’effort réel, nous pourrions affiner nos estimations, et par l’analyse de celle-ci trouver des gains d’efficacité dans le développement logiciel.</p>

<p>Le problème avec cette approche c’est qu’elle méconnaît fondamentalement la nature du développement logiciel. Il est un processus créatif et expérimental. Le développement logiciel est un système complexe articulé par de multiples rétroactions et interactions faiblement compréhensibles. C’est un processus organique d’essais et d’erreurs, de faux départs, d’expérimentations et de viandages monumentaux. De nombreuses études ont montré qu’un bon travail créatif est mieux réalisé par des experts autonomes et motivés. En tant que développeurs, nous devons être libres de pouvoir tester des trucs, voir comment ils évoluent, revenir sur de mauvaises décisions, mais aussi tenter plusieurs solutions avant de pouvoir choisir la meilleure. Nous n’avons pas de chiffres précis permettant de justifier telle ou telle décision, ou pourquoi nous devons arrêter cette tâche en plein milieu et jeter tout ce qui a été fait. Nous ne pouvons pas réellement expliquer toutes nos décisions, certaines sont des intuitions, d’autres ne sont pas bonnes.</p>

<p>Si vous me demandez combien de temps il faudrait pour développer cette fonctionnalité, ma réponse la plus honnête est que je n’en sais rien du tout. Je pourrai en avoir une idée précise, mais il y a une telle quantité de petites probabilités, que je pourrai me tromper d’un facteur 10. Qu’en est-il de la fonctionnalité en elle-même ? Est-ce réellement une bonne idée ? Je ne suis pas seulement celui qui va l&#8217;implémenter, j&#8217;en suis aussi le garant. Et s’il y avait une meilleure façon de répondre à ce besoin métier ? Que faire si nous découvrons une meilleure façon de faire en deux fois moins de temps ? Et que faire si je tombe tout à coup sur une technologie ou une technique qui permette de faire une vraie différence sur le marché pour l’entreprise ? Et que faire si ce n’était pas prévu ?</p>

<p>Dès que vous demandez à un développeur son programme précis pour les 8 prochains jours (ou pire les prochaines semaines ou mois), vous tuez toute créativité et sérendipité. Vous devriez penser qu’il est libre de modifier les estimations ou les tâches à tout moment, il pensera qu’il est redevable d’au moins expliquer ces changements. Plus la tâche est granuleuse, plus vous tuez l’autonomie et la créativité. Peu importe le nombre de fois que vous dites que ça n’a pas d’importance s’il n’atteint pas ses estimations, il se sentira mal. Sa réponse à votre besoin d’estimations prendra deux formes : premièrement il apprendra à surestimer largement, juste au cas où il croise le genre de petits pièges qui parsèment son chemin ; deuxièmement il cherchera le petit hack qui suffira à régler la tâche. Putain de dette technique, ce sera à la prochaine pauvre âme de s’en occuper, je dois atteindre mes estimations. Les bons développeurs ont l’habitude de trouver la justification difficile mais nécessaire de faire du boulot en douce, ils seront effectivement obligés de mentir aux responsables sur ce qu’ils font vraiment, mais le management très fin rend difficile la possibilité de prendre le temps pour faire ce qui doit être fait.</p>

<p>Pour être clair, je ne parle pas pour tout le monde ici. Tous les développeurs ne détestent pas le micro management. Certains sont plus intéressés par la paie que par l’artisanat logiciel. Pour eux, le micro management peut être très attractif. Dès que vous avez compris comment ça marche, vous surestimez et faites le minimum nécessaire, puis vous publiez la fonctionnalité. Si les utilisateurs sont mécontents, que le système est buggé et qu’il ralentit, vous n’aurez rien à vous reprocher, vous avez fait ce qu’on vous a demandé.</p>

<p>Le management fin est une potion magique ‘d’évaporation du talent’. Les personnes qui vivent et respirent le développement vont partir – ils n’ont généralement pas trop de mal à trouver un autre boulot, autre part. Les personnes qui n’aiment pas prendre des décisions et qui ont besoin d’excuses resteront. Vous vous retrouverez entouré d’une équipe conciliante qui suivra gentiment vos instructions, n’argumentera pas sur l’utilité des fonctionnalités, remplira correctement Jira, atteindra ses estimations, et produira un logiciel de très faible qualité.</p>

<p><strong>Alors comment gérer les développeurs ?</strong></p>

<p>Simple : filez leur de l’autonomie. Ça semble être la panacée, mais le management granuleux est un poison pour le développement logiciel. C’est largement mieux de donner des objectifs globaux et de permettre à vos développeurs de les atteindre comme ils le souhaitent. Parfois ils échoueront ; vous devez faire avec ça. Et ne réagissez pas aux échecs en ajoutant des processus et du contrôle. Travaillez à monter une belle équipe en qui vous pouvez avoir confiance et qui peut contribuer à la réussite plutôt que d’occuper des salles comme des pisseurs de code passifs.</p>

<p><em>Le principe d&#8217;incertitude d&#8217;Heisenberg s&#8217;applique également aux textes : c&#8217;est au moment de les publier que vous découvrez les erreurs et fautes qu&#8217;il contient. Ainsi merci aux nombreux relecteurs qui m&#8217;ont aidé à en diminuer les effets.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qu'est-ce qu'une équipe agile et comment la former ?]]></title>
    <link href="http://blog.ticabri.com/blog/2015/03/07/quest-ce-quune-equipe-agile-et-comment-les-former/"/>
    <updated>2015-03-07T11:41:51+01:00</updated>
    <id>http://blog.ticabri.com/blog/2015/03/07/quest-ce-quune-equipe-agile-et-comment-les-former</id>
    <content type="html"><![CDATA[<p>Le texte ci-dessous est la traduction d&#8217;<a href="http://www.leadingagile.com/2015/02/what-is-an-agile-team-and-how-do-you-form-them/">un article de Mike Cottmeyer pour le site leadingagile.com</a> :</p>

<p><img class="center" src="/images/11980412393_e13fe2dcdb_z.jpg"></p>

<p>Une équipe agile n’est pas simplement un regroupement aléatoire de personnes. Une équipe agile n’est pas un groupe d’analystes d’affaires faisant un daily standup – réunion quotidienne debout – pour coordonner leur travail. Ce n’est pas non plus un groupe de développeurs qui se réunissent toutes les semaines pour faire des sprint planning – réunions pour entamer une session de travail. Ce n’est pas une équipe de projet avec des gens matricés sur deux ou plusieurs équipes agiles.</p>

<p>Une équipe agile est un groupe inter-fonctionnel de personnes qui ont tout le nécessaire, matériel et humain, pour développer un produit fonctionnel et testé de façon incrémentielle. Ces personnes sont dédiées à l’équipe, et ont comme règle de ne pas changer d’équipe selon les allés et venues.</p>

<p>Je suggère que la définition même d’une équipe agile… un groupe inter-fonctionnel de personnes qui ont tout le nécessaire, matériel et humain, pour développer un produit fonctionnel et testé de façon incrémentielle… tire son besoin dans la formation des équipes agiles, surtout à cause de notre méprise de ce qu’est en fait un produit.</p>

<p>De façon simpliste cette orientation est simple… il s’agit d’un système qui part des interactions de l’utilisateur pour arriver aux données et inversement ainsi que toutes les compétences pour déployer et installer ledit produit en production. De manière générale, former une équipe comme cela n’est pas toujours possible, et aussi souvent que possible, n’est pas souhaitable.</p>

<p>De façon plus globale un produit est en fait un sous-système faisant partie intégrante de systèmes plus larges.</p>

<p>En acceptant cette définition, il devient souvent tout à fait possible de monter un petit groupe inter-fonctionnel de personnes qui ont tout le nécessaire, matériel et humain, pour développer un produit fonctionnel et testé de façon incrémentielle.</p>

<p>L’idée est de s’organiser autour des produits et des fonctionnalités quand c’est possible, et de s’organiser autour des sous-systèmes lorsqu’il y a des fonctionnalités partagées. Nous appelons cela collectivement les capacités entrepreneuriales. Une fois que vous avez compris les capacités entrepreneuriales, vous pouvez aligner les capacités entrepreneuriales avec l’architecture technique et finalement l’architecture organisationnelle.</p>

<p>L’intersection et l&#8217;organisation des architectures entrepreneuriale, technique et organisationnelle apparaissent lorsque vous former un groupe complet inter-fonctionnel de personnes qui ont tout le nécessaire, matériel et humain, pour développer leur partie du produit fonctionnelle et testée de façon incrémentielle.</p>

<p>Puisque vos architectures entrepreneuriale, technique et organisationnelle sont probablement cassées, vous allez avoir des dépendances entre les équipes qui devront être gérer. Pour l’instant.</p>

<p>Au cours du temps, le boulot de l’initiative de transformation est de casser ces dépendances.</p>

<p>Les dépendances sont mauvaises et doivent être cassées.</p>

<p>Plus vous avez à gérer des dépendances, moins vous êtes agiles, point.</p>

<p>Au cours du temps, en cassant ces dépendances, vous pourrez traiter chacune de ces équipes comme des équipes purement et parfaitement agiles.</p>

<p>Tant que vous ne commencez pas à former des équipes qui s’organisent autour des capacités entrepreneuriales et des architectures technique et organisationnelle, et que vous ne faites pas le difficile travail de casser les dépendances… tout ce que vous pourrez faire est d’aller vers du Scrum. Et vous n’aurez jamais la valeur à laquelle prétend l’orientation de votre travail.</p>

<p>Je vous le dis… la raison pour laquelle vous faites de l’agile sans vous sentir agile pour autant est parce que vous n’avez pas ce genre d’équipes et vous avez beaucoup trop de dépendances.</p>

<p>Aucun daily standup ne pourra résoudre le problème.</p>

<p>Une culture agile ne pourra pas faire le travail à votre place.</p>

<p><a href="http://www.leadingagile.com/2015/02/what-is-an-agile-team-and-how-do-you-form-them/">Version originale</a> par <a href="http://www.leadingagile.com/author/mcottmeyer/">Mike Cottmeyer</a> pour <a href="http://www.leadingagile.com">leadingagile.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Épanouissement technique ?]]></title>
    <link href="http://blog.ticabri.com/blog/2014/12/24/epanouissement-technique/"/>
    <updated>2014-12-24T17:00:00+01:00</updated>
    <id>http://blog.ticabri.com/blog/2014/12/24/epanouissement-technique</id>
    <content type="html"><![CDATA[<p>Lors de <a href="http://sudweb.fr/2014/">#SudWeb2014</a>, David Bruant et Pablo Pernot ont fait un <em>happening</em> pour que nous parlions tous ensemble <a href="http://www.areyouagile.com/2014/05/4-malaises-et-un-tres-bon-moment/">d&#8217;épanouissement technique</a>.</p>

<p>C&#8217;était l&#8217;occasion de prendre la parole pour donner son point de vue ou partager ses bonnes pratiques. Mais comme <a href="http://www.areyouagile.com/2014/05/4-malaises-et-un-tres-bon-moment/">l&#8217;explique Pablo</a>, la mayonnaise n&#8217;a pas forcément bien pris.</p>

<h2>L&#8217;épanouissement avant la technique</h2>

<p>S&#8217;il n&#8217;est pas forcément nécessaire d&#8217;être à la pointe de la technique pour être épanoui. Il est important de trouver une motivation pour être épanoui. Et je pense que lorsqu&#8217;il y a épanouissement, l&#8217;expertise n&#8217;est pas bien loin.</p>

<p>Lorsque je rencontre de nouvelles têtes et que nous faisons les présentations, vient souvent la fameuse question : &ldquo;que fais-tu dans la vie ?&rdquo;
Cette question a deux interprétations possibles :</p>

<ol>
<li>Quel est ton rôle professionnel dans la société ?</li>
<li>Quelles sont tes passions ?</li>
</ol>


<p>Je dois avouer que peu de gens me répondent en me parlant de leurs hobbies. Passion et travail sont souvent deux catégories bien distinctes et peu peuvent se targuer de les rassembler et ainsi de <strong>s&#8217;épanouir au travail</strong>.</p>

<p>Deux corollaires :</p>

<ul>
<li>Aimez-vous votre travail ?</li>
<li>Seriez-vous prêt à être payé pour pratiquer votre hobby ?</li>
</ul>


<p>Ce qui est bien dommage : on n&#8217;a pas l&#8217;habitude de concevoir le travail comme une activité épanouissante.
Le travail c&#8217;est avant tout (au moyen-âge) un engin de torture, le tribalerium. Désormais quand vous parlez de <em>travail</em> à quelqu&#8217;un, il aura très vite à l&#8217;esprit l&#8217;image d&#8217;une tâche fatigante, mais nécessaire car rémunérée.</p>

<p>À l&#8217;inverse, on ne peut que difficilement imaginer qu&#8217;un hobby ou une passion puissent être rémunérée et il n&#8217;est donc pas envisageable d&#8217;en faire son travail.</p>

<h2>Le travail comme hobby ou les outils de l&#8217;épanouissement technique</h2>

<p>On a pris l&#8217;habitude de considérer deux champs lexicaux :</p>

<ol>
<li>travail : sérieux, professionnel, industrialisation, respect</li>
<li>hobby : amusant, amateur, dimanche, décontracté</li>
</ol>


<p>D&#8217;ailleurs le talk d&#8217;<a href="https://twitter.com/tut_tuuut">Agnès Hasser</a> à SudWeb 2013 avait créé la polémique. Pas en terme de contenu, ce dernier ayant plutôt été reconnu de bonne faction. Mais au sujet du titre : <a href="http://vimeo.com/69882988">Conduite de changement, de l&#8217;artisanat à l&#8217;industrialisation</a>. Autrement dit : <em>&ldquo;Fini de rigoler, on passe aux choses sérieuses.&rdquo;</em> ou encore <em>&ldquo;Arrête avec tes rustines, on va professionnaliser tout ça.&rdquo;</em>.</p>

<p>Je ne crois pas qu&#8217;il soit sain d&#8217;opposer ces termes. Je ne crois pas qu&#8217;il faille forcément distinguer le monde du travail et les loisirs. Je vous laisse vous faire votre propre avis.</p>

<p>Tous vous le diront : <em>c&#8217;est en forgeant qu&#8217;on devient forgeron</em>. On ne devient pas un expert du jour au lendemain. Il faut passer du temps sur le sujet pour apprendre de ses erreurs et prendre suffisamment de recul pour permettre l&#8217;innovation.</p>

<p>Et là encore, de manière générale, on peut distinguer deux cadres d&#8217;activités :</p>

<ol>
<li>le travail pour lequel il faut se forcer.</li>
<li>le hobby pour lequel on ne compte pas ses heures.</li>
</ol>


<p>En fait, <a href="http://fr.wikipedia.org/wiki/Douglas_McGregor">Douglas McGregor</a> proposent <a href="http://fr.wikipedia.org/wiki/Th%C3%A9orie_X_et_th%C3%A9orie_Y">deux théories autour du travail</a> qui font étrangement penser à la différence entre un hobby et un travail. Plutôt que de paraphraser wikipedia, je vous laisse en prendre connaissance. (TL;DR) L&#8217;idée principale étant que dans la théorie X il faut forcer le travailleur à se mettre à la tâche pendant que dans la théorie Y et grâce à la responsabilisation et à la satisfaction, le travailleur trouve tous les intérêts du monde dans son activité. Cette dernière entraine donc le travailleur dans un cercle virtueux d&#8217;épanouissement, contrairement à la première qui enferme le travailleur dans un cercle vicieux.</p>

<p>Qu&#8217;il soit pécunière, ludique ou culturel, l&#8217;intérêt est la clef de la passion et donc de l&#8217;épanouissement.</p>

<p>Pour les hobbies, l&#8217;intérêt, la responsabilité, l&#8217;amusement sont personnel et donc facile à trouver.</p>

<p>Pour le travail, celui que vous êtes <em>obligé</em> d&#8217;accomplir, il est parfois plus difficile à définir puis à inculquer aux collègues et autres collaborateurs.</p>

<h2>Du travail à l&#8217;artisanat</h2>

<p>Nous avons la chance dans le monde du développement informatique d&#8217;avoir un métier jeune et donc des habitudes moins ancrées. Ce qui permet à des développeurs d&#8217;imaginer et de décrire leurs conditions de travail. Certains, moi compris, souscrivent au Software Craftsmanship, ou comment remettre un peu de sérieux dans un métier qui voulait trop l&#8217;être.</p>

<p>On pourrait considérer le développement comme un travail d&#8217;ingénieur. Mais le rendrait trop sérieux, dans le mauvais sens du terme.</p>

<p>D&#8217;un autre côté, on pourrait qualifier le travail de développeur de la même manière que le travail d&#8217;un menuisier ou d&#8217;un cuisinier. On trouve d&#8217;ailleurs beaucoup de passionnés dans ces métiers. Ils ne comptent pas leurs heures (contrairement à leur entourage), ils s&#8217;entrainent pour devenir meilleur, ils peaufinent. Ils ne <em>produisent</em> pas, ils <em>livrent</em>.</p>

<p>Je ne suis pas tombé dans l&#8217;informatique quand j&#8217;étais petit. J&#8217;ai travaillé pour en faire ma passion afin d&#8217;être suffisamment passionné pour en faire mon travail. Et c&#8217;est dans cet équilibre que je recherche l&#8217;épanouissement technique. Car je suis un passionné.</p>

<p>Si vous voulez vous passionner dans le développement, rien de tel que :</p>

<ul>
<li>les <a href="https://blog.crafting-labs.fr/?post/2011/11/05/Code-Retreat-Toulouse-3-d%C3%A9cembre">code retreats</a></li>
<li>les <a href="http://aperoweb-toulouse.github.io/">apéros web</a></li>
<li>les <a href="http://www.meetup.com/Software-Craftsmanship-Toulouse/">meetups</a></li>
<li>et bien sûr les conférences comme <a href="http://sudweb.fr/2014/">SudWeb</a></li>
</ul>


<p>À vous de découvrir ce qui se fait proche de chez vous ou en ligne.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dans ton flux]]></title>
    <link href="http://blog.ticabri.com/blog/2014/10/08/dans-ton-flux/"/>
    <updated>2014-10-08T09:40:00+02:00</updated>
    <id>http://blog.ticabri.com/blog/2014/10/08/dans-ton-flux</id>
    <content type="html"><![CDATA[<p>Tout ceux qui ont essayé React et Flux doivent avoir pris connaissance des exemples proposés sur le <a href="https://github.com/facebook/flux/tree/master/examples">github de flux</a>.</p>

<p>Pour rappel, voici l&#8217;organisation logicielle que propose Facebook sous le nom de flux.</p>

<p><a href="http://www.toptal.com/front-end/simple-data-flow-in-react-applications-using-flux-and-backbone"><img class="center" src="/images/posts/toptal-blog-image-1412170548235.png" title="source: toptal" ></a></p>

<p>Afin de mieux visualiser les interactions entre les stores et les composants react, voici un schéma des interactions.</p>

<p><a href="/images/posts/flux-chat.png"><img class="center" src="/images/posts/flux-chat.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Déployer son site octopress depuis une nouvelle machine]]></title>
    <link href="http://blog.ticabri.com/blog/2014/06/09/deployer-son-site-octopress-depuis-une-nouvelle-machine/"/>
    <updated>2014-06-09T13:16:00+02:00</updated>
    <id>http://blog.ticabri.com/blog/2014/06/09/deployer-son-site-octopress-depuis-une-nouvelle-machine</id>
    <content type="html"><![CDATA[<p><a href="http://blog.ticabri.com/blog/2013/05/28/zombie-ninjas-attack-a-survivors-retrospective/">Ce blog tourne avec Octopress</a>, un framework pour Jekyll et la mise en ligne d&#8217;un nouveau contenu se fait <a href="http://blog.ticabri.com/blog/2013/09/27/utiliser-git-pour-deployer-votre-site-web/">grâce à Git</a>.</p>

<p>Pour autant la stratégie de déploiement des sources de la branche <code>source</code> vers la branche <code>master</code> du repo github utilise un répertoire dans <code>source</code> nommé <code>_deploy</code> dans lequel est stocké tout ce qui va être pushé sur la branche<code>master</code>. Et si vous utilisez plusieurs machines, cela peut vite devenir un cass-tête.</p>

<p>La marche à suivre est pourant simple. Sur la nouvelle machine :</p>

<ul>
<li>récupérez les sources ;
<code>
git clone -b source git@github.com:username/username.github.com.git octopress
</code></li>
<li>récupérez l&#8217;état à jour de <code>_deploy</code> ;
<code>
git clone git@github.com:username/username.github.com.git _deploy
</code></li>
<li><em>faites vos modifications</em></li>
<li>faites un <code>rake generate</code> pour mettre à jour <code>_deploy</code> ;</li>
<li>pushez vos modifications sur la branche <code>source</code> de github ;</li>
<li>faites un <code>rake deploy</code> pour envoyer tout ça sur la branche master de github.</li>
</ul>


<p>Toutes ces infos viennent du billet de blog de <a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">0# (zerosharp)</a>.</p>
]]></content>
  </entry>
  
</feed>
